#version 450

#extension GL_ARB_separate_shader_objects : enable
#extension GL_ARB_shading_language_420pack : enable

layout (local_size_x = 1, local_size_y = 1) in;

//layout (binding = 0, r32f) uniform writeonly image1D RWImage;
layout (set = 0, binding = 0) buffer IB
{
	int OutIndices[];
};

struct FPosColorUVVertex
{
	float x, y, z;
	uint Color;
	float u, v;
};

layout (set = 0, binding = 1) buffer VB
{
	FPosColorUVVertex OutVertices[];
};

layout (set = 0, binding = 2) uniform UB
{
	float Y;
	float Extent;
};

void main()
{
	int Out = int(gl_GlobalInvocationID.x);

	OutIndices[Out * 3 + 0] = Out * 4 + 0;
	OutIndices[Out * 3 + 1] = Out * 4 + 1;
	OutIndices[Out * 3 + 2] = Out * 4 + 3;
	OutIndices[Out * 3 + 3] = Out * 4 + 1;
	OutIndices[Out * 3 + 4] = Out * 4 + 2;
	OutIndices[Out * 3 + 5] = Out * 4 + 3;

	OutVertices[Out * 4 + 0].x = -Extent;
	OutVertices[Out * 4 + 0].y = Y;
	OutVertices[Out * 4 + 0].z = -Extent;
	OutVertices[Out * 4 + 0].Color = uint(-1);
	OutVertices[Out * 4 + 0].u = 0;
	OutVertices[Out * 4 + 0].v = 0;

	OutVertices[Out * 4 + 1].x = Extent;
	OutVertices[Out * 4 + 1].y = Y;
	OutVertices[Out * 4 + 1].z = -Extent;
	OutVertices[Out * 4 + 1].Color = uint(-1);
	OutVertices[Out * 4 + 1].u = 0;
	OutVertices[Out * 4 + 1].v = 1;

	OutVertices[Out * 4 + 2].x = Extent;
	OutVertices[Out * 4 + 2].y = Y;
	OutVertices[Out * 4 + 2].z = Extent;
	OutVertices[Out * 4 + 2].Color = uint(-1);
	OutVertices[Out * 4 + 2].u = 1;
	OutVertices[Out * 4 + 2].v = 1;

	OutVertices[Out * 4 + 3].x = -Extent;
	OutVertices[Out * 4 + 3].y = Y;
	OutVertices[Out * 4 + 3].z = Extent;
	OutVertices[Out * 4 + 3].Color = uint(-1);
	OutVertices[Out * 4 + 3].u = 1;
	OutVertices[Out * 4 + 3].v = 0;
}
